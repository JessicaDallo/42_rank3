

----------------- INFO TXT ------------------------

FOR CD
/* Values for the second argument to access.
   These may be OR'd together.  */
#define	R_OK	4		/* Test for read permission.  */
#define	W_OK	2		/* Test for write permission.  */
#define	X_OK	1		/* Test for execute permission.  */
#define	F_OK	0		/* Test for existence.  */

/* Test for access to NAME using the real UID and real GID.  */
extern int access (const char *__name, int __type) __THROW __nonnull ((1)); CD


	if (access(path, F_OK) == -1)
	{
		ft_error("cd: No such file or directory", 1);
		return (FALSE);
	}


WAIT.H
pid_t waitpid(pid_t pid, int *status, int options);
A biblioteca também define macros para analisar o valor de status fornecido pelas funções wait, waitpid e waitid, tais como:

    WIFEXITED(status): Retorna um valor diferente de zero se o processo filho terminou normalmente (ou seja, se exit() foi chamado).
    WEXITSTATUS(status): Retorna o código de saída do processo filho, se ele terminou normalmente (usado em combinação com WIFEXITED).
    WIFSIGNALED(status): Retorna um valor diferente de zero se o processo filho terminou devido a um sinal não capturado.
    WTERMSIG(status): Retorna o número do sinal que causou a finalização do processo.
    WIFSTOPPED(status): Retorna um valor diferente de zero se o processo filho está atualmente parado (suspenso).
    WSTOPSIG(status): Retorna o número do sinal que causou a parada do processo filho.
	WNOHANG: Retorna imediatamente se nenhum processo filho terminou (ou seja, não bloqueia a execução).
	WUNTRACED: Também retorna o status de processos filhos que estão parados, além dos que foram finalizados.
